namespace = wcduel

# To be fire by decision or event
character_event = {
	id = wcduel.8

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		save_event_target_as = target_duel_attacker_01
		FROM = { save_event_target_as = target_duel_defender_01 }
		FROM = {
			if = {
				limit = {
					OR = {
						NOT = { has_character_modifier = declined_prestige_duel_timer }
						NOT = {
							AND = {
								is_female = no
								ROOT = { is_female = yes }
								top_liege = { is_nomadic = no }
							}
						}
					}
				}
				add_character_modifier = {
					modifier = declined_prestige_duel_timer
					duration = 1095
					hidden = yes
				}
				set_character_flag = punish_declining
			}
		}
		if = {
			limit = { NOT = { has_character_modifier = recent_duel_timer } }
			add_character_modifier = {
				modifier = recent_duel_timer
				hidden = yes
				duration = 365
			}
		}
		FROM = {
			if = {
				limit = { NOT = { has_character_modifier = recent_duel_timer } }
				add_character_modifier = {
					modifier = recent_duel_timer
					hidden = yes
					duration = 365
				}
			}
		}
		if = {
			limit = { has_character_modifier = makgora_fight }
			character_event = { id = wcduel.9 }
		}
		if = {
			limit = {
				OR = {
					has_character_modifier = challenge_for_supremacy_fight
					has_character_modifier = duel_fight
				}
			}
			FROM = { character_event = { id = wcduel.10 } }
		}
		if = {
			limit = { has_character_modifier = just_fight }
			FROM = { character_event = { id = wcduel.110 } }
		}
	}
}

# Mak'gora
character_event = {
	id = wcduel.9
	desc = EVTDESC_wcduel_9
	picture = GFX_evt_makgora
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	# "Modern" mak'gora
	option = {
		name = EVTOPTA_wcduel_9
		custom_tooltip = {
			text = EVTOPTA_wcduel_9_tooltip_1
		}
		event_target:target_duel_attacker_01 = { set_character_flag = modern_makgora }
		event_target:target_duel_defender_01 = { set_character_flag = modern_makgora }
		if = {
			limit = { NOT = { trait = brave } }
			random = {
				chance = 35
				if = { limit = { trait = craven } remove_trait = craven character_event = { id = 38255 } }
				if = { limit = { NOT = { trait = craven } } add_trait = brave character_event = { id = 38270 } }
			}
		}
		event_target:target_duel_defender_01 = { character_event = { id = wcduel.10 } }
		ai_chance = {
			factor = 1
			modifier = {
				factor = 12
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 3
				trait = kind
			}
			modifier = {
				factor = 1.5
				trait = just
			}
			modifier = {
				factor = 1.5
				trait = patient
			}
			modifier = {
				factor = 1.5
				trait = honest
			}
		}
	}
	# Tradition mak'gora
	option = {
		name = LOKTAR_OGAR
		custom_tooltip = {
			text = EVTOPTB_wcduel_9_tooltip_1
		}
		event_target:target_duel_attacker_01 = { set_character_flag = traditional_makgora }
		event_target:target_duel_defender_01 = { set_character_flag = traditional_makgora }
		if = {
			limit = { NOT = { trait = brave } }
			random = {
				chance = 75
				if = { limit = { trait = craven } remove_trait = craven character_event = { id = 38296 } }
				if = { limit = { NOT = { trait = craven } } add_trait = brave character_event = { id = 38270 } }
			}
		}
		event_target:target_duel_defender_01 = { character_event = { id = wcduel.10 } }
		ai_chance = {
			factor = 1
			modifier = {
				factor = 12
				opinion = { who = FROM value = -50 }
			}
			modifier = {
				factor = 3
				trait = cruel
			}
			modifier = {
				factor = 1.5
				trait = envious
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = deceitful
			}
		}
	}
}
letter_event = {
	id = wcduel.10
	desc = {
		trigger = {
			has_character_flag = modern_makgora
		}
		text = EVTDESC_wcduel_10_case01
	}
	desc = {
		trigger = {
			has_character_flag = traditional_makgora
		}
		text = EVTDESC_wcduel_10_case02
	}
	desc = {
		trigger = {
			has_character_modifier = challenge_for_supremacy_fight
		}
		text = EVTDESC_wcduel_10_case03
	}
	picture = GFX_evt_makgora
	border = GFX_event_letter_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_wcduel_10
		prestige = 50
		if = {
			limit = { trait = craven }
			random = {
				chance = 20
				remove_trait = craven
				character_event = { id = 38296 }
			}
		}
		if = {
			limit = {
				event_target:target_duel_attacker_01 = {
					has_opinion_modifier = { who = ROOT modifier = grievously_offended }
				}
			}
			event_target:target_duel_attacker_01 = {
				remove_opinion = { who = ROOT modifier = grievously_offended }
			}
		}
		event_target:target_duel_attacker_01 = {
			character_event = { id = wcduel.11 }
		}
		clr_character_flag = punish_declining

		ai_chance = {
			factor = 75
			modifier = {
				factor = 2
				has_character_modifier = challenge_for_supremacy_fight
			}
			modifier = {
				factor = 2
				trait = brave
			}
			modifier = {
				factor = 1.5
				trait = proud
			}
		}
	}
	option = {
		name = EVTOPTB_wcduel_10
		if = {
			limit = {
				OR = {
					has_character_modifier = makgora_fight
					has_character_modifier = challenge_for_supremacy_fight
				}
			}
			if = { limit = { trait = brave } remove_trait = brave }
			if = { limit = { NOR = { trait = brave trait = craven } } add_trait = craven }
			prestige = -1000
			if = {
				limit = {
					OR = {
						has_character_modifier = makgora_fight
						AND = {
							has_character_modifier = challenge_for_supremacy_fight
							culture_group = orc_group
						}
					}
				}
				any_realm_character = {
					limit = { culture_group = orc_group }
					opinion = {
						modifier = opinion_fled_makgora
						who = ROOT
						years = 100
					}
				}
			}
		}
		event_target:target_duel_attacker_01 = {
			hidden_tooltip = {
				opinion = {
					modifier = opinion_fled_duel
					who = ROOT
					years = 100
				}
				character_event = { id = wcduel.12 }
			}
		}
		clr_character_flag = punish_declining

		# Clean up flags and modifiers
		event_target:target_duel_attacker_01 = {
			clr_all_combat_flags_and_modifiers_effect = yes
			hidden_tooltip = { remove_character_modifier = recent_duel_timer }
		}
		event_target:target_duel_defender_01 = {
			clr_all_combat_flags_and_modifiers_effect = yes
			hidden_tooltip = { remove_character_modifier = recent_duel_timer }
		}

		ai_chance = {
			factor = 25
			modifier = {
				factor = 10
				trait = craven
			}
		}
	}
}
# Opponent rejected the challenge
letter_event = {
	id = wcduel.11
	desc = EVTDESC_wcduel_11
	picture = GFX_evt_makgora
	border = GFX_event_letter_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_wcduel_11
		event_target:target_duel_attacker_01 = {
			opinion = { modifier = opinion_fought_duel who = event_target:target_duel_defender_01 years = 100 }
		}
		event_target:target_duel_defender_01 = {
			character_event = { id = wcduel.110 }
			opinion = { modifier = opinion_fought_duel who = event_target:target_duel_attacker_01 years = 100 }
		}
	}
}
# Opponent accepted the challenge
letter_event = {
	id = wcduel.12
	desc = EVTDESC_wcduel_12
	picture = GFX_evt_makgora
	border = GFX_event_letter_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_wcduel_12
	}
}

# To be fired by on_combat_pulse
# Technical event to find a enemy
character_event = {
	id = wcduel.99

	is_triggered_only = yes
	hide_window = yes
	
	only_playable = yes

	trigger = {
		OR = {
			ai = no
			has_game_rule = {
				name = duels_on_battleground
				value = ai
			}
		}

		is_alive = yes
		is_adult = yes
		prisoner = no

		in_battle = yes
		has_fight_modifier_trigger = no
		OR = {
			AND = {
				war = yes
				is_ruler = yes
				any_current_enemy = {
					OR = {
						is_root_enemy_commander_trigger = yes
						any_courtier_or_vassal = { is_root_enemy_commander_trigger = yes }
					}
				}
			}
			AND = {
				independent = no
				liege = {
					any_current_enemy = {
						OR = {
							is_root_enemy_commander_trigger = yes
							any_courtier_or_vassal = { is_root_enemy_commander_trigger = yes }
						}
					}
				}
			}
		}
    }

	weight_multiplier = {
        days = 1

        modifier = {
            factor = 2
            trait = duelist
        }
        modifier = {
            factor = 2
            trait = brave
        }
		modifier = {
			factor = 2
			combat_rating = 10
		}
        modifier = {
            factor = 1.5
            trait = wroth
        }
		modifier = {
			factor = 1.5
			combat_rating = 5
		}
		modifier = {
			factor = 0.5
			OR = {
				tier = EMPEROR
				tier = KING
			}
		}
        modifier = {
            factor = 0.25
            trait = craven
        }
		# They're VIP, so they aren't in the heat of battle
		modifier = {
			factor = 0.25
			is_ruler = yes
			OR = {
				is_primary_war_attacker = yes
				is_primary_war_defender = yes
			}
		}
    }

	immediate = {
		ROOT = {
			add_character_modifier = {
				name = battlefield_fight
				days = -1
			}
			save_event_target_as = target_duel_attacker_01
		}
		if = {
			limit = {
				war = yes
				is_ruler = yes
			}
			random_list = {
				50 = {
					any_current_enemy = {
						limit = { is_root_enemy_commander_trigger = yes }
						start_combat_effect = yes
					}
					modifier = {
						factor = 0
						NOT = { any_current_enemy = { is_root_enemy_commander_trigger = yes } }
					}
				}
				50 = {
					any_current_enemy = {
						any_courtier_or_vassal = {
							limit = { is_root_enemy_commander_trigger = yes }
							start_combat_effect = yes
						}
					}
					modifier = {
						factor = 0
						NOT = { any_current_enemy = { any_courtier_or_vassal = { is_root_enemy_commander_trigger = yes } } }
					}
				}
			}
		}
		else = {
			if = {
				limit = { independent = no }
				liege = {
					random_list = {
						50 = {
							any_current_enemy = {
								limit = { is_root_enemy_commander_trigger = yes }
								start_combat_effect = yes
							}
							modifier = {
								factor = 0
								NOT = { any_current_enemy = { is_root_enemy_commander_trigger = yes } }
							}
						}
						50 = {
							any_current_enemy = {
								any_courtier_or_vassal = {
									limit = { is_root_enemy_commander_trigger = yes }
									start_combat_effect = yes
								}
							}
							modifier = {
								factor = 0
								NOT = { any_current_enemy = { any_courtier_or_vassal = { is_root_enemy_commander_trigger = yes } } }
							}
						}
					}
				}
			}
		}
	}
}

# You find the enemy and decide to attack or not
character_event = {
	id = wcduel.100
	desc = EVTDESC_wcduel_100
	picture = GFX_evt_duel0
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_wcduel_100
		if = {
			limit = { NOT = { trait = brave } }
			random = {
				chance = 10
				if = { limit = { trait = craven } remove_trait = craven character_event = { id = 38296 } }
				if = { limit = { NOT = { trait = craven } } add_trait = brave character_event = { id = 38270 } }
			}
		}
		prestige = 25
		event_target:target_duel_defender_01 = {
			character_event = { id = wcduel.110 }
		}
		ai_chance = {
			factor = 5
			modifier = {
				factor = 2
				trait = brave
			}
			modifier = {
				factor = 1.5
				trait = proud
			}
		}
	}
	option = {
		name = EVTOPTB_wcduel_100
		if = {
			limit = { NOT = { trait = craven } }
			random = {
				chance = 10
				if = { limit = { trait = brave } remove_trait = brave }
				if = { limit = { NOT = { trait = brave } } add_trait = craven character_event = { id = 38257 } }
			}
		}
		prestige = -10
		event_target:target_duel_attacker_01 = { clr_all_combat_flags_and_modifiers_effect = yes }
		event_target:target_duel_defender_01 = { clr_all_combat_flags_and_modifiers_effect = yes }
		ai_chance = {
			factor = 5
			modifier = {
				factor = 0.1
				trait = craven
			}
		}
	}
}

# Ping event
character_event = {
	id = wcduel.101

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		event_target:target_duel_attacker_01 = {
			character_event = { id = wcduel.100 }
		}
	}
}

#######################################################################
#
#		START OF DUEL
#
#######################################################################

character_event = {
	id = wcduel.110

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_global_flag = duel_logs_on_flag }
			log = "(COMBAT) Combat started between [target_duel_attacker_01.GetBestName] and [target_duel_defender_01.GetBestName]"
		}
		event_target:target_duel_defender_01 = {
			set_variable = { which = number_of_rounds value = 1 }
			character_event = { id = wcduel.1000 }
		}
		event_target:target_duel_attacker_01 = {
			set_variable = { which = number_of_rounds value = 1 }
			character_event = { id = wcduel.1000 }
			character_event = { id = wcduel.130 }
		}
	}
}

# Selects actions
character_event = {
	id = wcduel.130
	desc = EVTDESC_wcduel_130
	picture = GFX_evt_duel0
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		clear_event_target = target_duel_enemy
		if = {
			limit = { event_target:target_duel_attacker_01 = { character = ROOT } }
			event_target:target_duel_defender_01 = { save_event_target_as = target_duel_enemy }
		}
		if = {
			limit = { event_target:target_duel_defender_01 = { character = ROOT } }
			event_target:target_duel_attacker_01 = { save_event_target_as = target_duel_enemy }
		}
	}

	option = {
		name = EVTOPTA_wcduel_130
		custom_tooltip = {
			text = EVTOPTA_wcduel_130_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.131 }
			}
		}
		ai_chance = {
			factor = 2
		}
	}
	option = {
		name = EVTOPTB_wcduel_130
		custom_tooltip = {
			text = EVTOPTB_wcduel_130_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.132 }
			}
		}
	}
	option = {
		name = EVTOPTC_wcduel_130
		trigger = {
			always = no
		}
		custom_tooltip = {
			text = EVTOPTC_wcduel_130_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.133 }
			}
		}
		ai_chance = {
			factor = 3
			modifier = {
				factor = 0
				OR = {
					check_variable = { which = combat_action_block_effect_timer value = 1 }
					check_variable = { which = combat_action_dodge_effect_timer value = 1 }
				}
			}
		}
	}
	option = {
		name = EVTOPTD_wcduel_130
		trigger = {
			has_character_modifier = battlefield_fight
			NAND = {
				event_target:target_duel_attacker_01 = { character = ROOT }
				NOT = { check_variable = { which = number_of_rounds value = 2 } }
			}
			NAND = {
				has_character_flag = already_used_combat_action_escape_flag
				has_character_flag = already_used_combat_action_surrender_flag
				has_character_flag = already_used_combat_action_agree_flag
			}
		}
		custom_tooltip = {
			text = EVTOPTD_wcduel_130_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.134 }
			}
		}
		ai_chance = {
			factor = 0.5
			modifier = {
				factor = 0
				NOT = { trait = craven }
				OR = {
					ai_honor = -10
					check_variable = { which = duel_hp value = 5 }
				}
			}
			modifier = {
				factor = 0
				is_ruler = yes
				OR = {
					is_primary_war_attacker = yes
					is_primary_war_defender = yes
				}
			}
		}
	}
}
# Offensive actions
character_event = {
	id = wcduel.131
	desc = EVTDESC_wcduel_130
	picture = GFX_evt_duel0
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_global_flag = duel_logs_on_flag }
			log = "(COMBAT) [Root.GetBestName] chose an offensive action"
		}
	}

	# Mage: Arcane Barrage
	option = {
		trigger = { is_mage_class_trigger = yes }
		name = "ability_arcane_blast"
		custom_tooltip = { text = "ability_arcane_blast_desc" }
		set_character_flag = combat_ability_arcane_blast_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Hunter: Cobra Shot
	option = {
		trigger = { is_hunter_class_trigger = yes }
		name = "ability_cobra_shot"
		custom_tooltip = { text = "ability_cobra_shot_desc" }
		set_character_flag = combat_ability_cobra_shot_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Warrior: Furious Slash
	option = {
		trigger = {
			OR = {
				is_warrior_class_trigger = yes
				has_class_trait_trigger = no
				is_alternative_class_trigger = yes
			}
		}
		name = "ability_furious_slash"
		custom_tooltip = { text = "ability_furious_slash_desc" }
		set_character_flag = combat_ability_furious_slash_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Paladin: Crusader Strike
	option = {
		trigger = { is_paladin_class_trigger = yes }
		name = "ability_crusader_strike"
		custom_tooltip = { text = "ability_crusader_strike_desc" }
		set_character_flag = combat_ability_crusader_strike_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Priest: Smite
	option = {
		trigger = { is_priest_class_trigger = yes }
		name = "ability_smite"
		custom_tooltip = { text = "ability_smite_desc" }
		set_character_flag = combat_ability_smite_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Priest: Mind Blast
	option = {
		trigger = { always = no }
		name = "ability_mind_blast"
		custom_tooltip = { text = "ability_mind_blast_desc" }
		set_character_flag = combat_ability_mind_blast_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Rogue: Sinister Strike
	option = {
		trigger = { is_rogue_class_trigger = yes }
		name = "ability_sinister_strike"
		custom_tooltip = { text = "ability_sinister_strike_desc" }
		set_character_flag = combat_ability_sinister_strike_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Warlock and Shadow Priest: Shadow Bolt
	option = {
		trigger = {
			OR = {
				is_warlock_class_trigger = yes
				is_shadow_priest_class_trigger = yes
			}
		}
		name = "ability_shadow_bolt"
		custom_tooltip = { text = "ability_shadow_bolt_desc" }
		set_character_flag = combat_ability_shadow_bolt_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Shaman: Lightning Bolt
	option = {
		trigger = { is_shaman_class_trigger = yes }
		name = "ability_lightning_bolt"
		custom_tooltip = { text = "ability_lightning_bolt_desc" }
		set_character_flag = combat_ability_lightning_bolt_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Druid: Solar Wrath
	option = {
		trigger = {
			is_druid_class_trigger = yes
			NOR = {
				has_character_flag = combat_long_ability_cat_form_flag
				has_character_flag = combat_long_ability_bear_form_flag
			}
		}
		name = "ability_solar_wrath"
		custom_tooltip = { text = "ability_solar_wrath_desc" }
		set_character_flag = combat_ability_solar_wrath_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Druid: Shred
	option = {
		trigger = {
			is_druid_class_trigger = yes
			has_character_flag = combat_long_ability_cat_form_flag
		}
		name = "ability_shred"
		custom_tooltip = { text = "ability_shred_desc" }
		set_character_flag = combat_ability_shred_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Druid: Mangle
	option = {
		trigger = {
			is_druid_class_trigger = yes
			has_character_flag = combat_long_ability_bear_form_flag
		}
		name = "ability_mangle"
		custom_tooltip = { text = "ability_mangle_desc" }
		set_character_flag = combat_ability_mangle_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Loa Priest: Wrath of the Loa
	option = {
		trigger = { is_loa_priest_class_trigger = yes }
		name = "ability_wrath_of_the_loa"
		custom_tooltip = { text = "ability_wrath_of_the_loa_desc" }
		set_character_flag = combat_ability_wrath_of_the_loa_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Death Knight: Death Strike
	option = {
		trigger = { is_death_knight_class_trigger = yes }
		name = "ability_death_strike"
		custom_tooltip = { text = "ability_death_strike_desc" }
		set_character_flag = combat_ability_death_strike_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Necromancer: Death Coil
	option = {
		trigger = {
			OR = {
				is_necromancer_class_trigger = yes
				has_character_flag = ability_death_coil_is_available_flag
			}
		}
		name = "ability_death_coil"
		custom_tooltip = { text = "ability_death_coil_desc" }
		set_character_flag = combat_ability_death_coil_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Mage: Flamestrike
	option = {
		trigger = {
			OR = {
				is_wyrm_trigger = yes
				is_dragon_trigger = yes
				is_drake_trigger = yes
				is_whelp_trigger = yes
				trait = creature_fire_elemental
				has_character_flag = ability_flamestrike_is_available_flag
			}
		}
		name = "ability_flamestrike"
		custom_tooltip = { text = "ability_flamestrike_desc" }
		set_character_flag = combat_ability_flamestrike_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Warlock: Drain Life
	option = {
		trigger = { has_character_flag = ability_drain_life_is_available_flag }
		name = "ability_drain_life"
		custom_tooltip = { text = "ability_drain_life_desc" }
		set_character_flag = combat_ability_drain_life_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}

	option = {
		name = EVTOPTD_wcduel_131
		custom_tooltip = {
			text = EVTOPTD_wcduel_131_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.130 }
			}
		}
		ai_chance = {
			factor = 0
		}
	}
}
# Defensive actions
character_event = {
	id = wcduel.132
	desc = EVTDESC_wcduel_130
	picture = GFX_evt_duel0
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_global_flag = duel_logs_on_flag }
			log = "(COMBAT) [Root.GetBestName] chose a defensive action"
		}
	}

	# Mage: Mana Shield
	option = {
		trigger = {
			is_mage_class_trigger = yes
			NOR = {
				has_character_flag = 25_chance_of_damage_absorption_flag
				has_character_flag = 50_chance_of_damage_absorption_flag
				has_character_flag = 75_chance_of_damage_absorption_flag
			}
			NOT = { check_variable = { which = combat_ability_mana_shield_cooldown_timer value = 1 } }
		}
		name = "ability_mana_shield"
		custom_tooltip = { text = "ability_mana_shield_desc" }
		set_character_flag = combat_ability_mana_shield_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Hunter: Beast Agility
	option = {
		trigger = {
			is_hunter_class_trigger = yes
			NOT = { check_variable = { which = combat_ability_beast_agility_cooldown_timer value = 1 } }
		}
		name = "ability_beast_agility"
		custom_tooltip = { text = "ability_beast_agility_desc" }
		set_character_flag = combat_ability_beast_agility_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Warrior: Defensive Stance
	option = {
		trigger = {
			OR = {
				is_warrior_class_trigger = yes
				has_class_trait_trigger = no
				is_alternative_class_trigger = yes
			}
			NOT = { check_variable = { which = combat_ability_defensive_stance_cooldown_timer value = 1 } }
		}
		name = "ability_defensive_stance"
		custom_tooltip = { text = "ability_defensive_stance_desc" }
		set_character_flag = combat_ability_defensive_stance_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Paladin: Divine Shield
	option = {
		trigger = {
			is_paladin_class_trigger = yes
			NOR = {
				has_character_flag = 25_chance_of_damage_absorption_flag
				has_character_flag = 50_chance_of_damage_absorption_flag
				has_character_flag = 75_chance_of_damage_absorption_flag
			}
			NOT = { check_variable = { which = combat_ability_divine_shield_cooldown_timer value = 1 } }
		}
		name = "ability_divine_shield"
		custom_tooltip = { text = "ability_divine_shield_desc" }
		set_character_flag = combat_ability_divine_shield_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Priest: Power Word: Shield
	option = {
		trigger = {
			is_priest_class_trigger = yes
			NOR = {
				has_character_flag = 25_chance_of_damage_absorption_flag
				has_character_flag = 50_chance_of_damage_absorption_flag
				has_character_flag = 75_chance_of_damage_absorption_flag
			}
			NOT = { check_variable = { which = combat_ability_power_word_shield_cooldown_timer value = 1 } }
		}
		name = "ability_power_word_shield"
		custom_tooltip = { text = "ability_power_word_shield_desc" }
		set_character_flag = combat_ability_power_word_shield_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Rogue: Evasion
	option = {
		trigger = {
			is_rogue_class_trigger = yes
			NOT = { check_variable = { which = combat_ability_evasion_cooldown_timer value = 1 } }
		}
		name = "ability_evasion"
		custom_tooltip = { text = "ability_evasion_desc" }
		set_character_flag = combat_ability_evasion_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Warlock: Immolate
	option = {
		trigger = {
			is_warlock_class_trigger = yes
			NOT = { check_variable = { which = combat_ability_immolate_cooldown_timer value = 1 } }
		}
		name = "ability_immolate"
		custom_tooltip = { text = "ability_immolate_desc" }
		set_character_flag = combat_ability_immolate_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Shaman: Wind Blessing
	option = {
		trigger = {
			is_shaman_class_trigger = yes
			NOT = { check_variable = { which = combat_ability_wind_blessing_cooldown_timer value = 1 } }
		}
		name = "ability_wind_blessing"
		custom_tooltip = { text = "ability_wind_blessing_desc" }
		set_character_flag = combat_ability_wind_blessing_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Druid: Barkskin
	option = {
		trigger = {
			is_druid_class_trigger = yes
			NOR = {
				has_character_flag = combat_long_ability_cat_form_flag
				has_character_flag = combat_long_ability_bear_form_flag
			}
			NOT = { check_variable = { which = combat_ability_barkskin_cooldown_timer value = 1 } }
		}
		name = "ability_barkskin"
		custom_tooltip = { text = "ability_barkskin_desc" }
		set_character_flag = combat_ability_barkskin_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Loa Priest: Absorption
	option = {
		trigger = {
			is_loa_priest_class_trigger = yes
			NOR = {
				has_character_flag = 25_chance_of_damage_absorption_flag
				has_character_flag = 50_chance_of_damage_absorption_flag
				has_character_flag = 75_chance_of_damage_absorption_flag
			}
			NOT = { check_variable = { which = combat_ability_absorption_cooldown_timer value = 1 } }
		}
		name = "ability_absorption"
		custom_tooltip = { text = "ability_absorption_desc" }
		set_character_flag = combat_ability_absorption_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Death Knight: Bone Shield
	option = {
		trigger = {
			is_death_knight_class_trigger = yes
			NOR = {
				has_character_flag = 25_chance_of_damage_absorption_flag
				has_character_flag = 50_chance_of_damage_absorption_flag
				has_character_flag = 75_chance_of_damage_absorption_flag
			}
			NOT = { check_variable = { which = combat_ability_bone_shield_cooldown_timer value = 1 } }
		}
		name = "ability_bone_shield"
		custom_tooltip = { text = "ability_bone_shield_desc" }
		set_character_flag = combat_ability_bone_shield_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Necromancer: Frost Armor
	option = {
		trigger = {
			OR = {
				is_necromancer_class_trigger = yes
				has_character_flag = ability_frost_armor_is_available_flag
			}
			NOR = {
				has_character_flag = 25_chance_of_damage_absorption_flag
				has_character_flag = 50_chance_of_damage_absorption_flag
				has_character_flag = 75_chance_of_damage_absorption_flag
			}
			NOT = { check_variable = { which = combat_ability_frost_armor_cooldown_timer value = 1 } }
		}
		name = "ability_frost_armor"
		custom_tooltip = { text = "ability_frost_armor_desc" }
		set_character_flag = combat_ability_frost_armor_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}
	# Shadow Priest: Shroud of Shadows
	option = {
		trigger = {
			is_shadow_priest_class_trigger = yes
			NOT = { check_variable = { which = combat_ability_shroud_of_shadows_cooldown_timer value = 1 } }
		}
		name = "ability_shroud_of_shadows"
		custom_tooltip = { text = "ability_shroud_of_shadows_desc" }
		set_character_flag = combat_ability_shroud_of_shadows_flag
		set_character_flag = finished_dueling_turn_flag
		duel_distributor_effect = yes
	}

	option = {
		name = EVTOPTD_wcduel_131
		custom_tooltip = {
			text = EVTOPTD_wcduel_131_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.130 }
			}
		}
		ai_chance = {
			modifier = {
				factor = 0
			}
		}
	}
}
# Passive\other actions
character_event = {
	id = wcduel.133
	desc = {
		trigger = {
			event_target:target_duel_attacker_01 = { character = ROOT }
			# NOT = { check_variable = { which = number_of_rounds value = 2 } }
		}
		text = EVTDESC_wcduel_130_case01_duel_first_round
	}
	desc = {
		trigger = {
			event_target:target_duel_defender_01 = { character = ROOT }
			# NOT = { check_variable = { which = number_of_rounds value = 2 } }
		}
		text = EVTDESC_wcduel_130_case02_duel_first_round
	}
	picture = GFX_evt_duel0
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_global_flag = duel_logs_on_flag }
			log = "(COMBAT) [Root.GetBestName] chose an other action"
		}
	}

	option = {
		name = EVTOPTA_wcduel_133
	}
	option = {
		name = EVTOPTB_wcduel_133
	}
	option = {
		name = EVTOPTC_wcduel_133
	}
	option = {
		name = EVTOPTD_wcduel_131
		custom_tooltip = {
			text = EVTOPTD_wcduel_131_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.130 }
			}
		}
		ai_chance = {
			factor = 0
		}
	}
}
# Surrender or escape
character_event = {
	id = wcduel.134
	desc = EVTDESC_wcduel_130
	picture = GFX_evt_duel0
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_global_flag = duel_logs_on_flag }
			log = "(COMBAT) [Root.GetBestName] tried to avoid a combat"
		}
	}

	option = {
		trigger = { NOT = { has_character_flag = already_used_combat_action_escape_flag } }
		name = EVTOPTA_wcduel_134

		set_character_flag = already_used_combat_action_escape_flag

		random_list = {
			30 = {
				custom_tooltip = {
					text = EVTOPTA_wcduel_134_tooltip_1
					hidden_tooltip = {
						character_event = { id = wcduel.810 }
					}
				}
				modifier = { factor = 0.75 NOT = { intrigue = 5 }	}
				modifier = { factor = 0.75 NOT = { intrigue = 10 }	}
				modifier = { factor = 1.25 intrigue = 15	}
				modifier = { factor = 1.25 intrigue = 20	}
				modifier = { factor = 1.25 intrigue = 25	}
				modifier = { factor = 1.25 intrigue = 30	}
				modifier = { factor = 1.25 intrigue = 35	}
				modifier = { factor = 1.25 intrigue = 40	}
			}
			70 = {
				custom_tooltip = {
					text = EVTOPTA_wcduel_134_tooltip_2
					hidden_tooltip = {
						character_event = { id = wcduel.811 }
					}
				}
			}
		}
		set_character_flag = combat_action_escape_flag
		set_character_flag = finished_dueling_turn_flag

		if = {
			limit = { NOT = { trait = craven } }
			random = {
				chance = 50
				if = { limit = { trait = brave } remove_trait = brave }
				if = { limit = { NOT = { trait = brave } } add_trait = craven character_event = { id = 38257 } }
			}
		}

		prestige = -25

		ai_chance = {
			modifier = {
				factor = 0.1
				ai_honor = -10
				NOT = { trait = craven }
			}
		}
	}
	option = {
		trigger = {
			NOT = { has_character_flag = already_used_combat_action_surrender_flag }
		}
		name = EVTOPTB_wcduel_134	# Surrender

		set_character_flag = already_used_combat_action_surrender_flag

		custom_tooltip = {
			text = EVTOPTB_wcduel_134_tooltip
		}
		set_character_flag = combat_action_surrender_flag
		set_character_flag = finished_dueling_turn_flag
		event_target:target_duel_enemy = { character_event = { id = wcduel.800 } }

		if = {
			limit = { NOT = { trait = craven } }
			random = {
				chance = 20
				if = { limit = { trait = brave } remove_trait = brave }
				if = { limit = { NOT = { trait = brave } } add_trait = craven character_event = { id = 38257 } }
			}
		}

		prestige = -25

		ai_chance = {
			modifier = {
				factor = 0
				is_ruler = yes
				OR = {
					is_primary_war_attacker = yes
					is_primary_war_defender = yes
				}
			}
			modifier = {
				factor = 0.1
				check_variable = { which = duel_hp value = 3 }
				NOT = { trait = craven }
			}
		}
	}
	option = {
		name = EVTOPTD_wcduel_131
		custom_tooltip = {
			text = EVTOPTD_wcduel_131_tooltip
			hidden_tooltip = {
				character_event = { id = wcduel.130 }
			}
		}
		ai_chance = {
			factor = 0
		}
	}
}

# You killed your opponent
character_event = {
	id = wcduel.800
	desc = {
		trigger = {
			event_target:target_duel_enemy = { is_alive = no }
		}
		text = EVTDESC_wcduel_800_case01
	}
	desc = {
		trigger = {
			event_target:target_duel_enemy = { NOT = { has_character_flag = combat_action_surrender_flag } }
		}
		text = EVTDESC_wcduel_801_case01
	}
	desc = {
		trigger = {
			event_target:target_duel_enemy = { has_character_flag = combat_action_surrender_flag }
		}
		text = EVTDESC_wcduel_801_case03
	}
	picture = GFX_evt_duel5

	is_triggered_only = yes

	immediate = {
		clear_event_target = target_duel_enemy
		if = {
			limit = { event_target:target_duel_attacker_01 = { character = ROOT } }
			event_target:target_duel_defender_01 = { save_event_target_as = target_duel_enemy }
		}
		if = {
			limit = { event_target:target_duel_defender_01 = { character = ROOT } }
			event_target:target_duel_attacker_01 = { save_event_target_as = target_duel_enemy }
		}

		event_target:target_duel_enemy = {
			if = {
				limit = { has_character_flag = died_in_combat_flag }
				if = {
					limit = {
						has_dlc = Mystics
						NOT = { has_character_flag = treasury_is_protected }
					}
					any_artifact = {
						limit = { is_artifact_active = yes }
						random_list = {
							50 = {
								transfer_artifact = { from = PREV to = ROOT }
							}
							50 = {}
						}
					}
				}
				death = { death_reason = death_battle killer = ROOT }
			}
		}
	}

	# Spare enemy/enemy died in combat
	option = {
		trigger = {
			NOT = { has_character_modifier = challenge_for_supremacy_fight }
		}
		name = {
			trigger = {
				OR = {
					event_target:target_duel_enemy = { is_alive = no }
					AND = {
						has_character_modifier = makgora_fight
						has_character_flag = modern_makgora
					}
					has_character_modifier = duel_fight
				}
			}
			text = EVTOPTA_wcduel_800
		}
		name = {
			trigger = { event_target:target_duel_enemy = { is_alive = yes } }
			text = EVTOPTA_wcduel_801
		}

		# Imprisons the enemy (if it's alive)
		if = {
			limit = {
				has_character_modifier = battlefield_fight
				event_target:target_duel_enemy = { is_alive = yes }
			}
			if = {
				limit = { is_ruler = yes }
				event_target:target_duel_enemy = { imprison = ROOT }
			}
			else = { liege = { event_target:target_duel_enemy = { imprison = PREV } } }
			event_target:target_duel_enemy = { character_event = { id = wcduel.802 } }
		}

		# Clean up flags and modifiers
		event_target:target_duel_attacker_01 = { clr_all_combat_flags_and_modifiers_effect = yes }
		event_target:target_duel_defender_01 = { clr_all_combat_flags_and_modifiers_effect = yes }
		# Continuation of event chains
		# Quest: 'Infect a grain'
		if = {
			limit = {
				event_target:target_adventurer = { character = ROOT }
				has_character_flag = infection_in_progress
			}
			character_event = { id =  WCDAC.7030 }
		}

		prestige = 100

		ai_chance = {
			factor = 5
			modifier = {
				factor = 3
				has_benevolent_trait_trigger = yes
			}
		}
	}

	# Kill the enemy
	option = {
		trigger = {
			event_target:target_duel_enemy = { is_alive = yes }
			NOR = {
				AND = {
					has_character_modifier = makgora_fight
					has_character_flag = modern_makgora
				}
				has_character_modifier = duel_fight
			}

			# Event chains
			NOT = { character = event_target:target_guard }
		}
		name = EVTOPTB_wcduel_801

		if = {
			limit = {
				event_target:target_duel_attacker_01 = { character = ROOT }
				has_character_modifier = challenge_for_supremacy_fight
			}
			event_target:target_duel_defender_01 = {
				primary_title = {
					usurp_title_plus_barony_if_unlanded_and_vassals_no_adj = { target = ROOT type = claim }
				}
				any_demesne_title = {
					limit = { claimed_by = ROOT }
					usurp_title = { target = ROOT type = claim }
				}
				spawn_unit = {
					owner = ROOT
					province = ROOT
					home = ROOT
					troops = {
						archers = { 800 800 }
						light_infantry = { 1600 1600 }
						heavy_infantry = { 1200 1200 }
						light_cavalry = { 200 200 }
						knights = { 200 200 }
					}
					cannot_inherit = yes
					attrition = 1.0
					maintenance = no
				}
			}
		}
		# Kills the enemy
		event_target:target_duel_enemy = {
			if = {
				limit = {
					has_dlc = Mystics
					NOT = { has_character_flag = treasury_is_protected }
				}
				any_artifact = {
					limit = { is_artifact_active = yes }
					random_list = {
						50 = {
							transfer_artifact = { from = PREV to = ROOT }
						}
						50 = {}
					}
				}
			}
			if = {
				limit = { trait = demon }
				return_to_twisting_nether_effect = yes
			}
			else = {
				if = {
					limit = { trait = creature_lich }
					lose_corporeal_body_effect = yes
				}
				else = {
					death = { death_reason = death_battle killer = ROOT }
				}
			}
		}

		if = {
			limit = {
				NOT = { trait = cruel }
				ROOT = {
					event_target:target_duel_enemy = {
						NOR = {
							is_unholy_creature_to_prev_trigger = yes
							is_evil_trigger = yes
						}
					}
				}
			}
			random = {
				chance = 25
				add_trait_cruel_effect = yes
				remove_trait_kind_effect = yes
			}
		}
		# Clean up flags and modifiers
		event_target:target_duel_attacker_01 = { clr_all_combat_flags_and_modifiers_effect = yes }
		event_target:target_duel_defender_01 = { clr_all_combat_flags_and_modifiers_effect = yes }
		# Continuation of event chains
		# Quest: 'Infect a grain'
		if = {
			limit = {
				event_target:target_adventurer = { character = ROOT }
				has_character_flag = infection_in_progress
			}
			character_event = { id =  WCDAC.7030 }
		}

		prestige = 50

		ai_chance = {
			factor = 1
			modifier = {
				factor = 5
				has_evil_trait_trigger = yes
			}
			modifier = {
				factor = 4
				OR = {
					AND = {
						event_target:target_duel_attacker_01 = { character = ROOT }
						opinion = { who = event_target:target_duel_defender_01 value = -50 }
					}
					AND = {
						event_target:target_duel_defender_01 = { character = ROOT }
						opinion = { who = event_target:target_duel_attacker_01 value = -50 }
					}
					AND = {
						event_target:target_duel_attacker_01 = { character = ROOT }
						is_rival = event_target:target_duel_defender_01
					}
					AND = {
						event_target:target_duel_defender_01 = { character = ROOT }
						is_rival = event_target:target_duel_attacker_01
					}
				}
			}
		}
	}

	# Become the new Lich King
	option = {
		trigger = {
			NOT = { has_global_flag = the_scourge_is_under_the_legion_control_flag }
			event_target:target_duel_enemy = {
				is_alive = yes
				has_landed_title = e_scourge
			}
			has_character_modifier = battlefield_fight
		}
		name = EVTOPTD_wcduel_800

		if = {
			limit = { OR = { is_republic = yes is_theocracy = yes } }
			abdicate = yes
		}
		if = {
			limit = { is_female = no }
			custom_tooltip = { text = becomes_the_new_lich_king_tooltip }
		}
		if = {
			limit = { is_female = yes }
			custom_tooltip = { text = becomes_the_new_lich_queen_tooltip }
		}
		hidden_tooltip = {
			e_scourge = {
				holder_scope = {
					ROOT = { wealth = PREV }
					clear_wealth = yes
					abdicate_to = ROOT
					death = { death_reason = death_merged killer = ROOT }
				}
			}
		}

		ai_chance = {
			factor = 40
			modifier = {
				factor = 0.1
				ai_zeal = 25
				NOT = { true_religion = death_god }
			}
		}
	}
}
character_event = {
	id = wcduel.802
	desc = EVTDESC_wcduel_802
	picture = GFX_evt_duel3

	is_triggered_only = yes

	option = {
		name = EVTOPTA_wcduel_802
		prestige = -50
	}
}

# You fled. END COMBAT.
character_event = {
	id = wcduel.810
	desc = EVTDESC_wcduel_810
	picture = GFX_evt_duel0

	is_triggered_only = yes

	immediate = {
		# Clean up flags and modifiers
		event_target:target_duel_attacker_01 = { clr_all_combat_flags_and_modifiers_effect = yes }
		event_target:target_duel_defender_01 = { clr_all_combat_flags_and_modifiers_effect = yes }

		event_target:target_duel_enemy = { character_event = { id = wcduel.812 } }
	}

	option = {
		name = EXCELLENT
	}
}
# You haven't fled. Enemy's turn
character_event = {
	id = wcduel.811
	desc = EVTDESC_wcduel_811
	picture = GFX_evt_duel0

	is_triggered_only = yes

	option = {
		name = NONSENSE

		duel_distributor_effect = yes
	}
}
# Notifies that your enemy is fled
character_event = {
	id = wcduel.812
	desc = EVTDESC_wcduel_812
	picture = GFX_evt_duel0

	is_triggered_only = yes

	option = {
		name = EVTOPTA_wcduel_812
	}
}
# Combat Stats
character_event = {
	id = wcduel.900
	desc = EVTDESC_wcduel_1000
	picture = GFX_evt_duel0

	is_triggered_only = yes

	option = {
		name = OK
	}
}
character_event = {
	id = wcduel.1000

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		##############################
		# Max HP
		##############################

		# Default
		set_variable = { which = duel_max_hp value = 4 }

		# Age factors
		if = {
			limit = { age = 16 }
			change_variable = { which = duel_max_hp value = 16 }
			if = {
				limit = { age = 21 }
				change_variable = { which = duel_max_hp value = 4 }
			}
		}

		# Heath
		if = {
			limit = { health = 1 }
			change_variable = { which = duel_max_hp value = 4 }
			if = { limit = { health = 2   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 3   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 4   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 5   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 6   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 7   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 8   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 9   } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 10  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 11  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 12  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 13  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 14  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 15  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 16  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 17  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 18  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 19  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 20  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 21  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 22  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 23  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 24  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 25  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 26  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 27  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 28  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 29  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 30  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 31  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 32  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 33  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 34  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 35  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 36  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 37  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 38  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 39  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 40  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 41  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 42  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 43  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 44  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 45  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 46  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 47  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 48  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 49  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 50  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 51  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 52  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 53  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 54  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 55  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 56  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 57  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 58  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 59  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 60  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 61  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 62  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 63  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 64  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 65  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 66  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 67  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 68  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 69  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 70  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 71  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 72  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 73  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 74  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 75  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 76  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 77  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 78  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 79  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 80  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 81  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 82  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 83  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 84  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 85  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 86  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 87  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 88  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 89  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 90  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 91  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 92  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 93  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 94  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 95  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 96  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 97  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 98  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 99  } change_variable = { which = duel_max_hp value = 4 } }
			if = { limit = { health = 100 } change_variable = { which = duel_max_hp value = 4 } }
		}

		##############################
		# Final HP
		##############################

		set_variable = { which = duel_hp which = duel_max_hp }

		####################################
		# Physical defense and attack
		####################################

		# Default defense
		set_variable = { which = duel_phy_def value = 0 }

		# Default attack
		set_variable = { which = duel_phy_att value = 0 }

		if = {
			limit = {
				is_magic_class_trigger = no
				is_physical_class_trigger = yes
				is_combined_class_trigger = no
			}
			change_variable = { which = duel_phy_def value = 3 } change_variable = { which = duel_phy_att value = 6 }

			# Factors of combat rating
			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			change_variable = { which = duel_phy_def which = combat_rating_var }

			multiply_variable = { which = combat_rating_var value = 2 }
			change_variable = { which = duel_phy_att which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			# Factors of martial skill
			export_to_variable = { which = martial_var value = martial who = THIS }
			multiply_variable = { which = martial_var value = 0.25 }
			change_variable = { which = duel_phy_att which = martial_var }
			set_variable = { which = martial_var value = 0 }
		}

		if = {
			limit = {
				is_magic_class_trigger = yes
				is_physical_class_trigger = no
				is_combined_class_trigger = no
			}
			change_variable = { which = duel_phy_def value = 2 }

			# Factors of combat rating
			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			multiply_variable = { which = combat_rating_var value = 0.25 }
			change_variable = { which = duel_phy_def which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }
		}

		if = {
			limit = {
				is_combined_class_trigger = yes
			}
			change_variable = { which = duel_phy_def value = 2 } change_variable = { which = duel_phy_att value = 4 }

			# Factors of combat rating
			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			# multiply_variable = { which = combat_rating_var value = 0.9 }
			change_variable = { which = duel_phy_def which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			change_variable = { which = duel_phy_att which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			# Factors of martial skill
			export_to_variable = { which = martial_var value = martial who = THIS }
			multiply_variable = { which = martial_var value = 0.25 }
			change_variable = { which = duel_phy_att which = martial_var }
			set_variable = { which = martial_var value = 0 }
		}
		# Factors of martial skill for defense
		export_to_variable = { which = martial_var value = martial who = THIS }
		multiply_variable = { which = martial_var value = 0.25 }
		change_variable = { which = duel_phy_def which = martial_var }
		set_variable = { which = martial_var value = 0 }

		######################################
		# Magic defense and attack
		######################################

		# Default defense
		set_variable = { which = duel_mag_def value = 0 }

		# Default attack
		set_variable = { which = duel_mag_att value = 0 }

		if = {
			limit = {
				is_magic_class_trigger = no
				is_physical_class_trigger = yes
				is_combined_class_trigger = no
			}
			change_variable = { which = duel_mag_def value = 2 }

			# Factors of combat rating
			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			multiply_variable = { which = combat_rating_var value = 0.25 }
			change_variable = { which = duel_mag_def which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }
		}

		if = {
			limit = {
				is_magic_class_trigger = yes
				is_physical_class_trigger = no
				is_combined_class_trigger = no
			}
			change_variable = { which = duel_mag_def value = 3 } change_variable = { which = duel_mag_att value = 6 }

			# Factors of combat rating
			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			change_variable = { which = duel_mag_def which = combat_rating_var }

			multiply_variable = { which = combat_rating_var value = 2 }
			change_variable = { which = duel_mag_att which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			# Factors of learning
			export_to_variable = { which = learning_var value = learning who = THIS }
			multiply_variable = { which = learning_var value = 0.25 }
			change_variable = { which = duel_mag_att which = learning_var }
			set_variable = { which = learning_var value = 0 }
		}

		if = {
			limit = {
				is_combined_class_trigger = yes
			}
			change_variable = { which = duel_mag_def value = 2 } change_variable = { which = duel_mag_att value = 4 }

			# Factors of combat rating
			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			# multiply_variable = { which = combat_rating_var value = 0.9 }
			change_variable = { which = duel_mag_def which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			change_variable = { which = duel_mag_att which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			# Factors of learning
			export_to_variable = { which = learning_var value = learning who = THIS }
			multiply_variable = { which = learning_var value = 0.25 }
			change_variable = { which = duel_mag_att which = learning_var }
			set_variable = { which = learning_var value = 0 }
		}
		# Factors of learning for defense
		export_to_variable = { which = learning_var value = learning who = THIS }
		multiply_variable = { which = learning_var value = 0.25 }
		change_variable = { which = duel_mag_def which = learning_var }
		set_variable = { which = learning_var value = 0 }

		if = {
			limit = {
				is_magic_class_trigger = no
				is_physical_class_trigger = no
				is_combined_class_trigger = no
			}
			change_variable = { which = duel_phy_def value = 3 } change_variable = { which = duel_phy_att value = 6 }

			# Factors of combat rating
			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			multiply_variable = { which = combat_rating_var value = 0.5 }
			change_variable = { which = duel_phy_def which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			export_to_variable = { which = combat_rating_var value = combat_rating who = THIS }
			change_variable = { which = duel_phy_att which = combat_rating_var }
			set_variable = { which = combat_rating_var value = 0 }

			# Factors of martial skill
			export_to_variable = { which = martial_var value = martial who = THIS }
			multiply_variable = { which = martial_var value = 0.125 }
			change_variable = { which = duel_phy_att which = martial_var }
			set_variable = { which = martial_var value = 0 }
		}

		######################
		# Other
		######################

		if = {
			limit = {
				is_magic_class_trigger = no
				is_physical_class_trigger = yes
				is_combined_class_trigger = no
			}
			if = {
				limit = {
					trait = sorcerer
					check_variable = { which = duel_phy_att value = 4 }
					check_variable = { which = duel_phy_def value = 2 }
				}
				change_variable = { which = duel_phy_att value = -2 }
				change_variable = { which = duel_phy_def value = -1 }
				change_variable = { which = duel_mag_def value = 2 }
			}
		}
		if = {
			limit = {
				is_magic_class_trigger = yes
				is_physical_class_trigger = no
				is_combined_class_trigger = no
			}
			if = {
				limit = {
					OR = {
						trait = strong
						trait = robust
					}
					check_variable = { which = duel_mag_def value = 2 }
					check_variable = { which = duel_mag_att value = 4 }
				}
				change_variable = { which = duel_mag_def value = -1 }
				change_variable = { which = duel_mag_att value = -2 }
				change_variable = { which = duel_phy_def value = 2 }
			}
		}

		# Just for sure
		if = {
			limit = {
				NOT = {
					check_variable = { which = duel_phy_att value = 2 }
					check_variable = { which = duel_phy_att value = 2 }
				}
			}
			set_variable = { which = duel_phy_att value = 2 }
		}
		character_event = { id = wcduel.900 }
	}
}
# Dealing Damage
character_event = {
	id = wcduel.1500

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# duel_phy_att_tem + duel_phy_att_tem * 0.25
		# duel_phy_att_tem + duel_phy_att_tem * 0.5 - duel_phy_att_tem * 0.3
		event_target:target_duel_attacker_01 = { calc_cooldown_combat_effect = yes }
		event_target:target_duel_defender_01 = { calc_cooldown_combat_effect = yes }
		# Deals damage
		event_target:target_duel_attacker_01 = {
			event_target:target_duel_defender_01 = { prev_deal_damage_combat_effect = yes }
		}
		event_target:target_duel_defender_01 = {
			event_target:target_duel_attacker_01 = { prev_deal_damage_combat_effect = yes }
		}
		event_target:target_duel_attacker_01 = {
			clr_combat_desc_flags_effect = yes
			clr_combat_actions_flags_effect = yes

			# Getting traits
			if = {
				limit = { check_variable = { which = duel_damage value = 4 } }
				random_list = {
					80 = {}
					18 = {
						character_event = { id = 243 }
					}
					2 = {
						character_event = { id = 244 }
						modifier = {
							factor = 0
							NOT = { check_variable = { which = duel_damage value = 10 } }
						}
					}
				}
			}
			clr_character_flag = finished_dueling_turn_flag
			change_variable = { which = number_of_rounds value = 1 }
		}
		event_target:target_duel_defender_01 = {
			clr_combat_desc_flags_effect = yes
			clr_combat_actions_flags_effect = yes

			# Getting traits
			if = {
				limit = { check_variable = { which = duel_damage value = 4 } }
				random_list = {
					80 = {}
					18 = {
						character_event = { id = 243 }
					}
					2 = {
						character_event = { id = 244 }
						modifier = {
							factor = 0
							NOT = { check_variable = { which = duel_damage value = 10 } }
						}
					}
				}
			}
			clr_character_flag = finished_dueling_turn_flag
			change_variable = { which = number_of_rounds value = 1 }
		}

		event_target:target_duel_attacker_01 = {
			event_target:target_duel_defender_01 = { prev_win_combat_effect = yes }
		}
		event_target:target_duel_defender_01 = {
			event_target:target_duel_attacker_01 = { prev_win_combat_effect = yes }
		}
		# Continues the combat
		event_target:target_duel_attacker_01 = { character_event = { id = wcduel.130 } }
	}
}

# Cleanup
character_event = {
	id = wcduel.1700
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
	
	}
}